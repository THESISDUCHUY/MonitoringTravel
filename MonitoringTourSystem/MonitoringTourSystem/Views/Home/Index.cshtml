@model MonitoringTourSystem.ViewModel.HomeViewModel
@{
    ViewBag.Title = "Home Page";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="~/Scripts/Home/css/chat.css">
<link rel="stylesheet" type="text/css" href="~/Scripts/Home/css/homestyle.css">

<script src="~/Scripts/jquery.signalR-2.2.1.js"></script>
<script src="http://localhost:13062/signalr/hubs"></script>

<script>
    function searchTour() {
        var id = $('#nametour').val();
        $.ajax({
            url: "/Home/SearchTourGuide/" + id,
            type: "GET",    
        })
        .done(function (partialViewResult) {
            $("#list-tour").html(partialViewResult);
        });
    }

    //var userId;

    //$.connection.hub.url = 'http://localhost:13062/signalr';

    //var myHub = $.connection.warningHub;

    //$(function () {
    //    //// Start the hub
    //    window.hubReady = $.connection.hub.start();
    //});
    //$.connection.hub.start().done(function () {
    //    // Call the server side function AFTER the connection has been started
    //    myHub.server.createUser();
    //    //invoke for the user data
    //});
</script>

<div id="main-content" style="background-color: #1FB5AD; height: 100%;">
    <div class="wrapper" style="background-color: white; height: 87.5%; padding-top: 15px;">
        <div class='row' style="height: 100%; width: 100%; margin: 0px;">
            <div class="col-sm-3" style="height:100%; ">
                <div style="width:100%; background-color: white; height: 100%; ">
                    <div class="container-tabbar">
                        <p style="padding-top: 14px; font-size: 20px;">QUẢN LÝ TOUR</p>
                        <ul class="nav nav-tabs">
                            <li class="active"><a data-toggle="tab" href="#home">Tour</a></li>
                            <li><a data-toggle="tab" href="#menu1">Cảnh báo</a></li>
                            <li><a data-toggle="tab" href="#menu2">Trợ giúp</a></li>
                        </ul>

                        <div class="tab-content" style="border-radius: 3px; border-left: 1px solid #EAEBED; border-right: 1px solid #EAEBED; border-bottom: 1px solid #EAEBED; margin-top: -11px;">
                            <div id="home" class="tab-pane fade in active" style="padding-left: 10px; padding-right: 10px; padding-top: 10px; margin-top: 10px;">
                                <div id="searchform">
                                    <div class="input-group">
                                        <input type="text" class="form-control" placeholder="Tìm kiếm tour theo mã..." id="nametourVietNam" onkeyup="searchTour();" name="query" value="">
                                        <div class="input-group-btn">
                                            <button type="submit" id="Search" class="btn">
                                                <i class="fa fa-search" style="color: gray" aria-hidden="true"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <div class="input-group" style="margin-top: 10px; width: 100%;">
                                        <select id="region" style="width: 100%; margin-right: 10px; height: 34px; border-radius: 4px;">
                                            <option style="font-size: 18px;" value="0" disabled selected>Chọn miền</option>
                                        </select>   
                                    </div>
                                    <div id="DemoAjaxClick" class="alert alert-success" style="margin-top: 10px;">
                                        Tour đang hoạt động
                                    </div>
                                    <div id="list-tour" style="height: 100% ; overflow-y: hidden">
                                        @{
                                            Html.RenderPartial("ListTourGuide", Model);
                                        }
                                    </div>
                                </div>
                            </div>
                            <div id="menu1" class="tab-pane fade" style="padding-left: 10px; padding-right: 10px; padding-top: 10px; margin-top: 10px;">
                                <div class="alert alert-success" style="margin-top: 10px;">
                                    Danh sách cảnh báo
                                </div>
                                <div id="list-warning-reciver" style="height: 100% ; overflow-y: hidden">
                                    @{
                                        Html.RenderPartial("ListWarning", Model);
                                    }
                                </div>

                            </div>
                            <div id="menu2" class="tab-pane fade" style="padding-left: 10px; padding-right: 10px; padding-top: 10px; margin-top: 10px;">
                                <h3>Menu 2</h3>
                                <p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam.</p>
                            </div>

                        </div>
                    </div>
                </div>    
                </div>
            <div class="col-sm-9" style="height: 100%;  ">
                <div style="height: 10%; background-color: transparent;">
                    <div style="height: 98%; width: 47.5%; background-color: #FAFAFA;  border-radius: 1px;   border: 1px solid #EAEBED; float: left;">
                        <p style="padding-top: 14px; margin-left: 12px; font-size: 20px;">TRACKING TOURGUIDE</p>
                    </div>

                    <div id="message-content" onclick="messageClick();" style="height: 98%; width: 15%">
                        <a href="#">
                            <div style="height: 100%; float: left; width: 30%; display:table-cell; vertical-align:central; text-align:center; padding-top: 18px;">
                                <img alt="" src="~/Content/Images/ic_message.png" height="20" width="20">
                            </div>
                            <div style="height: 100%; float: left; width: 70%;">
                                <p style="color: white; vertical-align:top; font-size: 20px; padding-left: 55px;">12</p>
                                <p style="color: white; font-size: 12px; padding-left: 5px;">Tin nhắn mới</p>
                            </div>
                        </a>
                    </div>
                    <div id="map-content" onclick="mapClick();" style="height: 98%; width: 15%">
                        <div style="height: 100%; float: left; width: 30%; display:table-cell; vertical-align:central; text-align:center; padding-top: 18px;">
                            <img alt="" src="~/Content/Images/loading-process.png" height="20" width="20">
                        </div>

                        <div style="height: 100%; float: left; width: 70%;">
                            <p style="color: white; vertical-align:top; font-size: 20px; padding-left: 55px;">50</p>
                            <p style="color: white; font-size: 12px; padding-left: 22px;"> Hoạt động</p>
                        </div>
                    </div>
                    <div id="right" style="height: 98%; width: 15%">
                        <div style="height: 100%; float: left; width: 30%; display:table-cell; vertical-align:central; text-align:center; padding-top: 18px;">
                            <img alt="" src="~/Content/Images/support.png" height="20" width="20">
                        </div>

                        <div style="height: 100%; float: left; width: 70%;">
                            <p style="color: white; vertical-align:top; font-size: 20px; padding-left: 55px;">3</p>
                            <p style="color: white; font-size: 12px; padding-left: 22px;">Trợ giúp</p>
                        </div>
                    </div>

                </div>
                <div style="height: 2%;">
                </div>
                <div id="primary-div" style="height: 87%;background-color: white; border: 1px solid #EAEBED; border-radius: 3px;">
                    @{
                        var item = Model;
                        if (item.OptionRenderView == 1)
                        {
                            Html.RenderPartial("Map", Model);
                        }
                        if (item.OptionRenderView == 2)
                        {
                            Html.RenderPartial("Message", Model);
                        }
                    }                  
                </div>
                @*<script>
                    $(document).ready(function () {

                        LoadMarker();
                    });
                </script>*@
            </div>
        </div>
    </div>
</div>
<div class="containr">
    <!-- Modal -->
    <div id="myModal" class="modal fade" style="height: 100%" role="dialog">
        <div class="modal-dialog" style="width: 90%; height: 90%">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header" style="background: #1FB5AD;border-top-left-radius: 6px; border-top-right-radius: 6px;">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" style="color: #FFFFFF">CẢNH BÁO</h4>
                </div>
                <div class="modal-body" style="background: #FAFAFA">

                    <div class="row">
                        <div class="col-sm-9">
                            <div class="row" style="background: #FAFAFA; height: 150px;">

                                <div class="col-sm-4">
                                    <div class="form-group" style="margin-bottom: 5px;">
                                        <label for="exampleInputEmail1">Tên cảnh báo</label>
                                        <div class="input text required"><input class="form-control" id="warningName" required="required" placeholder="Nhập tên tour" maxlength="255" type="text"></div>
                                    </div>
                                    <div class="form-group" style="margin-bottom: 5px;">
                                        <label for="exampleInputEmail1">Loại cảnh báo</label>
                                        <select id="categoriesWarning" style="width: 100%; height: 33px;">
                                            <option selected disabled>-Chọn thể loại-</option>
                                        </select>
                                    </div>

                                </div>
                                <div class="col-sm-6">
                                    <div class="form-group" style="margin-bottom: 5px;">
                                        <label for="exampleInputEmail1">Chi tiết cảnh báo</label>
                                        <textarea class="form-control" style="resize: none;" rows="4" id="descriptionWarning" placeholder="Nhập chi tiết cảnh báo..."></textarea>
                                    </div>
                                </div>
                                <div class="col-sm-2">
                                    <div class="form-group" style="margin-bottom: 5px; border-radius: 5px;">
                                        <label for="exampleInputEmail1">Bán kính</label>
                                        <select id="distanceWarning" style="width: 100%; height: 33px;">
                                            <option selected disabled value="0">-Bán Kính-</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                            <div class="row" style="height: 300px;">
                                <input id="pac-input" class="controls" type="text" placeholder="Tìm địa điểm cảnh báo" style="font-family: Roboto,Arial,sans-serif; border-radius: 4px;font-size: 12px;">
                                <div id="map_canvas1" style="height:100%; width:97.7%;">
                                </div>
                            </div>
                        </div>

                        <div class="col-sm-3" style="margin-top: 15px;">
                            <div class="row" style="margin-right: -5px;">
                                <div class="alert alert-success" style="margin-top: 10px;">
                                    Danh sách tour nhận cảnh báo
                                </div>
                            </div>
                            <div class="row" style="background: #FFFFFF; margin-right: -5px; margin-top: -25px; height: 100%;">
                                <div id="list-tour-warning" style="height: 100% ; overflow-y: hidden">
                                    @{
                                        Html.RenderPartial("ListTourGuideWarning", Model);
                                    }
                                    </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" onclick="sendWarning();"  class="btn btn-primary" >Gửi cảnh báo</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // For Warning POPup
    var marker1;
    var map1;
    var geocoder;
    var infowindow;

    //For Home
    var marker, map;
    var pinColor = "FE7569";
    var pinColorSelect = "1FB5AD"
    var pinImage;
    var pinImageSelect;
    var listMarker = new Array();
    var longfake = 0.0000000001;
    var lagfake = 0.0000000001
    var listPosition = [];
    var listInforwindow = [];

    // FOR WARNING PROPERTY
    var listInfowindowWarning = [];
    var listMarkerWarning = new Array();
    var listCircle = new Array();

    function initAutocomplete() {
        map1 = new google.maps.Map(document.getElementById('map_canvas1'), {
            center: { lat: 10.823099, lng: 106.629664 },
            zoom: 16,
            mapTypeId: 'roadmap'
          });

          geocoder = new google.maps.Geocoder;
          infowindow = new google.maps.InfoWindow;

          google.maps.event.addListener(map1, "click", function (event) {
                  
            placeMarker(event.latLng);
            var latitude = event.latLng.lat();
            var longitude = event.latLng.lng();
            geocodeLatLng(geocoder, map1, infowindow, latitude, longitude);

            var location = {
                Laitude: latitude,
                Longitude: longitude,
            }
            
            //myHub.server.updateLocation(location);
              

          });
          // Create the search box and link it to the UI element.
          var input = document.getElementById('pac-input');
          var searchBox = new google.maps.places.SearchBox(input);
          map1.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

          // Bias the SearchBox results towards current map's viewport.
          map1.addListener('bounds_changed', function() {
            searchBox.setBounds(map1.getBounds());
          });

          var markers = [];
          // Listen for the event fired when the user selects a prediction and retrieve
          // more details for that place.
          searchBox.addListener('places_changed', function() {
            var places = searchBox.getPlaces();

            if (places.length == 0) {
              return;
            }

            // Clear out the old markers.
            markers.forEach(function(marker1) {
              marker.setMap(null);
            });
            markers = [];

            // For each place, get the icon, name and location.
            var bounds = new google.maps.LatLngBounds();
            places.forEach(function(place) {
              if (!place.geometry) {
                console.log("Returned place contains no geometry");
                return;
              }
              infowindow.close();
              placeMarker(place.geometry.location);
              // Create a marker for each place.


              if (place.geometry.viewport) {
                // Only geocodes have viewport.
                bounds.union(place.geometry.viewport);
              } else {
                bounds.extend(place.geometry.location);
              }
            });
            map1.fitBounds(bounds);
        });

        // FOR HOME ONLY
        var myLatlng = new google.maps.LatLng(10.824638, 106.627733);
        var mapOptions = {
            zoom: 4,
            center: myLatlng,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        }
        map = new google.maps.Map(document.getElementById('map_canvas'), mapOptions);

        //pinImage = new google.maps.MarkerImage("http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=%E2%80%A2|" + pinColor,
        //new google.maps.Size(21, 34),
        //new google.maps.Point(0, 0),
        //new google.maps.Point(10, 34));

        var pinImage = {
            url: 'http://localhost:20261/Content/Images/ic_marker_warning.png', // image is 512 x 512
            scaledSize: new google.maps.Size(50, 50)
        };


        var pinImageSelect = {
            url: 'http://localhost:20261/Content/Images/ic_marker_warning.png', // image is 512 x 512
            scaledSize: new google.maps.Size(50, 50)
        };
        //pinImageSelect = new google.maps.MarkerImage("http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=%E2%80%A2|" + pinColorSelect,
        //new google.maps.Size(21, 34),
        //new google.maps.Point(0, 0),
        //new google.maps.Point(10, 34));


        //pinImageWarning = new google.maps.MarkerImage("http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=%E2%80%A2|" + pinColorSelect,
        //new google.maps.Size(21, 34),
        //new google.maps.Point(0, 0),
        //new google.maps.Point(10, 34));

        // SLIDING MARKER   
        /* global define,module,require,google */
        (function (root, factory) {
            'use strict';
            if (typeof define === 'function' && define.amd) {
                // AMD. Register as an anonymous module.
                define(['jquery', 'marker-animate'], factory.bind(null, root));
            } else if (typeof module !== "undefined" && module !== null && module.exports != null) { // jshint ignore:line
                // Node module.
                module.exports = factory(root, require('jquery'), require('marker-animate'));
            } else {
                // Browser globals
                root.SlidingMarker = factory(root, root.jQuery);
            }
        }(this,
            function (root, $) {
                'use strict';

                //Let jQuery be soft dependency
                $ = $ || {};
                $.extend = $.extend || function extend(obj) {
                    //Taken (and modified) from here: http://stackoverflow.com/a/14604815/1691132
                    Array.prototype.slice.call(arguments, 1).forEach(function (source) {
                        if (source) {
                            for (var prop in source) {
                                if (source[prop] && source[prop].constructor === Object) {
                                    if (!obj[prop] || obj[prop].constructor === Object) {
                                        obj[prop] = obj[prop] || {};
                                        extend(obj[prop], source[prop]);
                                    } else {
                                        obj[prop] = source[prop];
                                    }
                                } else {
                                    obj[prop] = source[prop];
                                }
                            }
                        }
                    });
                    return obj;
                };

                var GoogleMarker = google.maps.Marker; //Store original in case it will be replaced in initializeGlobally().

                var animateTo,
                    markerAnimate_AnimateTo_Wrapper = function (destPosition, easing, duration) { //default implementation based on markerAnimate
                        if (destPosition === null || destPosition === undefined) {
                            //as markerAnimate provides no means to stop animation, do it manually, even though it leaks markerAnimate implementation.
                            if (window.cancelAnimationFrame) {
                                window.cancelAnimationFrame(this.AT_animationHandler);
                            } else {
                                clearTimeout(this.AT_animationHandler);
                            }
                            return;
                        }
                        google.maps.Marker.prototype.animateTo.apply(this, arguments);
                    };

                //default options
                var defaultOptions = {
                    easing: "easeInOutQuint",
                    duration: 1000,
                    animateFunctionAdapter: function (marker, destPosition, easing, duration) {
                        if (!animateTo) {
                            if (!google.maps.Marker.prototype.animateTo) {
                                throw new Error("Please either reference markerAnimate.js, or provide an alternative animateFunctionAdapter");
                            }
                            animateTo = markerAnimate_AnimateTo_Wrapper;
                        }
                        animateTo.call(marker, destPosition, {
                            easing: easing,
                            duration: duration,
                            complete: function () {
                            }
                        });
                    }
                };

                var inherits = function (childCtor, parentCtor) {
                 
                    function TempCtor() { }

                    TempCtor.prototype = parentCtor.prototype;
                    childCtor.superClass_ = parentCtor.prototype;
                    childCtor.prototype = new TempCtor();
      
                    childCtor.prototype.constructor = childCtor;
                };

                var decorates = function (childCtor, parentCtor) {
                    inherits(childCtor, parentCtor);

                    var parentPrototype = parentCtor.prototype;

                    //TODO: google.maps.MVCObject.prototype.set if object instanceof GoogleMarker

                    $.extend(childCtor.prototype, {
                        _instance: null, //override it in constructor

                        originalSet: function () {
                            return parentPrototype.set.apply(this, arguments);
                        },

                        //from MVCObject
                        set: function (key, value) {
                            var that = this;

                            that.originalSet.apply(that, arguments);

                            if (key === "position" && that instanceof SlidingMarker) {
                                that._setInstancePositionAnimated(value);
                            } else {
                                that.originalSet.apply(that._instance, arguments);
                            }
                        },

                        _setInstancePositionAnimated: function (position) {
                            var that = this;

                            if (that._constructing) { //pass by
                                return;
                            }

                            if (!position || !that._instance.getPosition()) { //If position is set for a first time, no animation should be applied
                                if (that._instance.getPosition() !== position) {
                                    that._instance.setPosition(position);
                                }
                                return;
                            }

                            //apply animation function
                            //this will cause many animationposition_changed events
                            that.get("animateFunctionAdapter").call(null, that._instance, position, that.get("easing"), that.get("duration"));
                        },

                        //setValues() will call set(), no need to override

                        originalAddListener: function () {
                            return parentPrototype.addListener.apply(this, arguments);
                        },

                        //from MVCObject
                        addListener: function (eventName, handler) {
                            var target = (eventName === "map_changed") ? this._instance : getEventTarget.call(this, eventName);
                            return this.originalAddListener.apply(target, arguments);
                        },

                        map_changed: function () {
                            //Should be empty
                            //Prevents this marker from appearing on map. Only this._instance marker will appear.
                        },

                        //This will be called by binding created with marker.bindTo() method, instead of call to set("position").
                        position_changed: function () {
                            if (!this._suppress_animation) {
                                this._setInstancePositionAnimated(this.getPosition());
                            } else {
                                delete this._suppress_animation;
                            }
                        }

                    });

                };

                //call it on SlidingMarker
                var getEventTarget = function (eventName) {
                    //redirect _changed events to this, other events to _instance
                    if (eventName.endsWith("_changed")) { //all _changed redirect to this
                        return this;
                    }
                    return this._instance;
                };

                var originalAddListener = google.maps.event.addListener;
                google.maps.event.addListener = function (instance, eventName, handler) {
                    //Redirect listener to target
                    if (instance instanceof SlidingMarker) {
                        var target = (eventName === "map_changed") ? instance._instance : getEventTarget.call(instance, eventName);
                        return originalAddListener.call(this, target, eventName, handler);
                    }

                    return originalAddListener.apply(this, arguments);
                };

                var originalTrigger = google.maps.event.trigger;
                google.maps.event.trigger = function (instance, eventName) {
                    //Replace instance parameter to target
                    if (instance instanceof SlidingMarker) {
                        var target = (eventName === "map_changed") ? instance : getEventTarget.call(instance, eventName),
                            newArgs = [target].concat(Array.prototype.slice.call(arguments, 1)); //replaces instance parameter with target

                        return originalTrigger.apply(this, newArgs);
                    }

                    return originalTrigger.apply(this, arguments);
                };

                //just string helper
                String.prototype.endsWith = String.prototype.endsWith || function (suffix) {
                    return this.indexOf(suffix, this.length - suffix.length) !== -1;
                };

                //constructor
                var SlidingMarker = function (opt_options) {

                    opt_options = $.extend({}, defaultOptions, opt_options);

                    this._instance = new GoogleMarker(opt_options);

                    this.animationPosition = null;

                    this._constructing = true;
                    // Call the parent constructor.
                    GoogleMarker.call(this, opt_options);
                    delete this._constructing;

                    this.bindTo("animationPosition", this._instance, "position");
                    this.bindTo("anchorPoint", this._instance, "anchorPoint"); //This makes InfoWindow.open(map, marker) work.
                    this.bindTo("internalPosition", this._instance, "internalPosition"); //This makes InfoWindow.open(map, marker) work.

                };

                decorates(SlidingMarker, GoogleMarker);

                //Overrides
                $.extend(SlidingMarker.prototype, {

                    getAnimationPosition: function () {
                        return this.get("animationPosition");
                    },

                    //Changes marker position immediately
                    setPositionNotAnimated: function (position) {
                        this._suppress_animation = true; //will be unset by position_changed handler
                        this.get("animateFunctionAdapter").call(null, this._instance, null); //stop current animation
                        this.originalSet("position", position);
                        this._instance.setPosition(position);
                    },

                    setDuration: function (value) {
                        this.set("duration", value);
                    },

                    getDuration: function () {
                        return this.get("duration");
                    },

                    setEasing: function (value) {
                        this.set("easing", value);
                    },

                    getEasing: function () {
                        return this.get("easing");
                    }

                });

                SlidingMarker.initializeGlobally = function () {
                    google.maps.Marker = SlidingMarker;
                };

                return SlidingMarker;

            }));
        //FOR ANIMATION
        // Animated Marker Movement. Robert Gerlach 2012-2013 https://github.com/combatwombat/marker-animate
        // MIT license
        //
        // params:
        // newPosition        - the new Position as google.maps.LatLng()
        // options            - optional options object (optional)
        // options.duration   - animation duration in ms (default 1000)
        // options.easing     - easing function from jQuery and/or the jQuery easing plugin (default 'linear')
        // options.complete   - callback function. Gets called, after the animation has finished
        google.maps.Marker.prototype.animateTo = function (newPosition, options) {
            defaultOptions = {
                duration: 1000,
                easing: 'linear',
                complete: null
            }
            options = options || {};

            // complete missing options
            for (key in defaultOptions) {
                options[key] = options[key] || defaultOptions[key];
            }

            // throw exception if easing function doesn't exist
            if (options.easing != 'linear') {
                if (typeof jQuery == 'undefined' || !jQuery.easing[options.easing]) {
                    throw '"' + options.easing + '" easing function doesn\'t exist. Include jQuery and/or the jQuery easing plugin and use the right function name.';
                    return;
                }
            }

            window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;
            window.cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame;

            // save current position. prefixed to avoid name collisions. separate for lat/lng to avoid calling lat()/lng() in every frame
            this.AT_startPosition_lat = this.getPosition().lat();
            this.AT_startPosition_lng = this.getPosition().lng();
            var newPosition_lat = newPosition.lat();
            var newPosition_lng = newPosition.lng();

            // crossing the 180° meridian and going the long way around the earth?
            if (Math.abs(newPosition_lng - this.AT_startPosition_lng) > 180) {
                if (newPosition_lng > this.AT_startPosition_lng) {
                    newPosition_lng -= 360;
                } else {
                    newPosition_lng += 360;
                }
            }

            var animateStep = function (marker, startTime) {
                var ellapsedTime = (new Date()).getTime() - startTime;
                var durationRatio = ellapsedTime / options.duration; // 0 - 1
                var easingDurationRatio = durationRatio;

                // use jQuery easing if it's not linear
                if (options.easing !== 'linear') {
                    easingDurationRatio = jQuery.easing[options.easing](durationRatio, ellapsedTime, 0, 1, options.duration);
                }

                if (durationRatio < 1) {
                    var deltaPosition = new google.maps.LatLng(marker.AT_startPosition_lat + (newPosition_lat - marker.AT_startPosition_lat) * easingDurationRatio,
                                                                marker.AT_startPosition_lng + (newPosition_lng - marker.AT_startPosition_lng) * easingDurationRatio);
                    marker.setPosition(deltaPosition);

                    // use requestAnimationFrame if it exists on this browser. If not, use setTimeout with ~60 fps
                    if (window.requestAnimationFrame) {
                        marker.AT_animationHandler = window.requestAnimationFrame(function () { animateStep(marker, startTime) });
                    } else {
                        marker.AT_animationHandler = setTimeout(function () { animateStep(marker, startTime) }, 17);
                    }

                } else {

                    marker.setPosition(newPosition);

                    if (typeof options.complete === 'function') {
                        options.complete();
                    }

                }
            }

            // stop possibly running animation
            if (window.cancelAnimationFrame) {
                window.cancelAnimationFrame(this.AT_animationHandler);
            } else {
                clearTimeout(this.AT_animationHandler);
            }

            animateStep(this, (new Date()).getTime());
        }
        LoadMarker();
        loadMarkerWarning();
    }
    function addMarkerWarning(distance, lat, long)
    {
        closeAllOfInfoWindow();
        var myLatlngWarning = new google.maps.LatLng(lat, long);
        var circle = new google.maps.Circle({
            map: map,
            radius: distance * 1000,    // 10 miles in metres
            fillColor: '#FF0000',
            strokeWeight: 1,
            strokeColor: "#f59d21",
        });
        circle.bindTo('center', listMarkerWarning[listMarkerWarning.length - 1], 'position');
        listInfowindowWarning[listMarkerWarning.length - 1].open(map, listMarkerWarning[listMarkerWarning.length - 1]);
        map.setCenter(myLatlngWarning);
        map.setZoom(15);
    }
    function closeAllOfInfoWindow()
    {
        
        for (j = 0; j < listInfowindowWarning.length; j++) {
            listInfowindowWarning[j].close();
        }
        for (i = 0; i < listInforwindow.length; i++)
        {
            listInforwindow[i].close();
        }
    }
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBGdBwIy95layOTnAy1Ovp07urh0OxQrp4&libraries=places&callback=initAutocomplete" async defer></script>
<link href="~/Content/DropdowSelect/select2.min.css" rel="stylesheet" />
<script src="~/Content/DropdowSelect/select2.min.js" type="text/javascript"></script>
<script type="text/javascript" src="~/Scripts/sweetalert-dev.js"></script>
<link rel="stylesheet" href="~/Scripts/sweetalert.css">
<script>

    // FOR POPUP WARNING
    var optionDistance = ["3KM", "5KM", "10 KM ", "20 KM ", "30 KM"];
    var categoriesWarning = ["Khủng Bố", "Thời Tiết", "Giao Thông", "Khác"];
    var lat;
    var long;

    $(document).on('change', '#distanceWarning', function () {

        //alert(categories);
        var distance = $("#distanceWarning").val();
        if (lat == null) {
            swal("Vui lòng chọn địa điểm cảnh báo!");
            return;
        }
        getListTourWarning(distance, lat, long);

    });
    $(document).ready(function()
    {
        $("#myModal").on("shown.bs.modal", function () {
            google.maps.event.trigger(map1, "resize");

            
            for (i = 0; i < optionDistance.length; i++)
            {
                $("#distanceWarning:last").append(new Option(optionDistance[i], optionDistance[i].split(" ")[0]));
            }
            $("#distanceWarning:last").select2({

            });

            for (i = 0; i < categoriesWarning.length; i++)
            {
                $("#categoriesWarning:last").append(new Option(categoriesWarning[i], i.toString()));
            }
            $("#categoriesWarning:last").select2({

            });
            if (optionDistance.length != 0) {
                optionDistance.length = 0;
            }

            if (categoriesWarning.length != 0) {
                categoriesWarning.length = 0;
            }

        });


        //myHub.client.selectSeat = function (message) {
        //    swal(message.Laitude.toString());
        //    var currentLocation = new google.maps.LatLng(message.Laitude, message.Longitude);
        //    MoverMarker(currentLocation, 1)
        //};

        //myHub.client.receiverWarning = function (message) {
        //    swal("Co canh bao moi");
        //};

    }); 
    function placeMarker(location) {

        var latMarker = location.toString().replace("(", "").replace(")","").split(",")[0];
        var longMarker = location.toString().replace("(", "").replace(")", "").split(",")[1];
        if (marker) {

            marker.setPosition(location);

        } else {
            marker = new google.maps.Marker({
                position: location,
                map: map1
            });
        }
        var distance = $("#distanceWarning").val();
        if (distance != null) {
            getListTourWarning(distance, latMarker, longMarker);
        }
    }
    function geocodeLatLng(geocoder, map, infowindow, latClick, longClick) {

        var latlng = { lat: latClick, lng: longClick };
        lat = latClick; // use when distance change
        long = longClick;
        geocoder.geocode({ 'location': latlng }, function (results, status) {
            if (status === 'OK') {
                if (results[1]) {
                    //
                    infowindow.setContent(results[1].formatted_address);
                    infowindow.open(map1, marker);
                } else {
                    //window.alert('No results found');
                }
            } else {
                //window.alert('Geocoder failed due to: ' + status);
            }
        });
    }
    function getListTourWarning(distance, latTemp, longTemp)
    {
        latSendWarning = latTemp;
        longSendWarning = longTemp;
        $.ajax({
            url: "/Home/GetListForWarning",
            type: "POST",
            data: {

                Distance: distance,
                Lat: latTemp,
                Long: longTemp,
            },

        })
        .done(function (partialViewResult) {
                $("#list-tour-warning").html(partialViewResult);
        });
    }

    // FOR WARNING IN HOME
    var latSendWarning;
    var longSendWarning;
    function sendWarning()
    {
       
        var warningName = $("#warningName").val();
        var descriptionWarning = $("#descriptionWarning").val();
        var categories = $("#categoriesWarning option:selected").text();
        var distance = $("#distanceWarning").val();

        if(warningName == null)
        {
            swal("Vui lòng nhập tiêu đề cảnh báo!");
            return;
        }
        if (distance == null)
        {
            swal("Vui lòng chọn bán kính cảnh báo!");
            return;
        }
        if(descriptionWarning == null)
        {
            swal("Vui lòng nhập mô tả cảnh báo!");
            return;
        }
        if(categories == null)
        {
            swal("Vui lòng thể loại cảnh báo!");
            return;
        }

        var dataSend = {
            WarningName: warningName,
            Description: descriptionWarning,
            Categories: categories,
            Distance: distance
        }

        $.ajax({
            url: "/Home/SendWarning",
            type: "POST",
            data: {

                Lat: latSendWarning,
                Long: longSendWarning,
                WarningName: warningName,
                DescriptionWarning: descriptionWarning,
                CategoryWarnig: categories,
                Distance: distance
            },
            success: function (result) {

                //var results = $.parseJSON(result);
                var message = result.Message;
                var success = result.Success;
                if (success == false) {
                    sweetAlert("Oops...", message, "error");
                }
                else {
                    swal("Gửi cảnh báo!", message, "success")
                    //myHub.server.sendWarning(dataSend);
                    loadMarkerWarning();
                    getListWarning();
                }
            },
            error: function (xhr) {
                sweetAlert("Oops...", "Gửi cảnh báo thất bại, vui lòng thử lại", "error");
            }
        });
    }

    function getListWarning()
    {
        $.ajax({
            url: "/Home/GetListWarning",
            type: "POST",

        })
        .done(function (partialViewResult) {
            $("#list-warning-reciver").html(partialViewResult);
        });
    }

    function loadMarkerWarning()
    {
        $.ajax({
            url: "/Home/GetWarningPosition/",
            type: "GET",
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            async: true,
            processData: false,
            cache: false,
            success: function (result) {
                var results = $.parseJSON(result);
                $(results).each(function (index, value) {

                    var longitude = this['longitude'];
                    var laitude = this['latitude'];
                    var title = this['warning_name'];

                    var myLatlngWarning = new google.maps.LatLng(laitude, longitude);

                    var imageMarkerWarning = {
                        url: 'http://localhost:20261/Content/Images/ic_marker_warning.png', // image is 512 x 512
                        scaledSize: new google.maps.Size(50, 62)
                    };

                    listMarkerWarning[index] = new SlidingMarker({
                        position: myLatlngWarning,
                        map: map,
                        animation: google.maps.Animation.Gp,
                        icon: imageMarkerWarning,
                        //shadow: pinShadow
                    })
                    listInfowindowWarning[index] = new google.maps.InfoWindow({
                        content: title
                    });
                    
                    listCircle[index] = new google.maps.Circle({
                        map: map,
                        radius: 0,    // 10 miles in metres
                        fillColor: '#FF0000',
                        strokeWeight: 1,
                        strokeColor: "#f59d21",
                    });
                    listCircle[index].bindTo('center', listMarkerWarning[index], 'position');

                    google.maps.event.addListener(listMarkerWarning[index], "click", function () {
                        closeAllOfInfoWindow();
                        listInfowindowWarning[index].open(map, listMarkerWarning[index]);                          
                    });
                });

                if (latSendWarning != null) {
                    var distance = $("#distanceWarning").val();
                    addMarkerWarning(distance, latSendWarning, longSendWarning);
                }
               
            },
            error: function (xhr) {
                alert('GET WARNING ERROR');
            }
        });
        
    }
    function selectMarkerWarning(id) {
        $.ajax({
            url: "/Home/GetMarkerWarningSelected/" + id,
            type: "GET",
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            async: true,
            processData: false,
            cache: false,
            success: function (result) {
                var results = $.parseJSON(result);
                $(results).each(function (index, value) {
                    var longitude = this['longitude'];
                    var laitude = this['latitude'];
                    var distance = this['distance']
                    var location = new google.maps.LatLng(laitude, longitude);
                    panTo(laitude, longitude);
                   

                    for (j = 0; j < listCircle.length; j++)
                    {
                        listCircle[j].setMap(null);
                    }
                    listCircle[id - 1] = new google.maps.Circle({
                        map: map,
                        radius: distance * 1000,    // 10 miles in metres
                        fillColor: '#FF0000',
                        strokeWeight: 1,
                        strokeColor: "#f59d21",
                    });
                    listCircle[id - 1].bindTo('center', listMarkerWarning[id - 1], 'position');
                    closeAllOfInfoWindow();
                    listInfowindowWarning[id - 1].open(map, listMarkerWarning[id - 1]);
                    map.setZoom(10);
                });
            },
            error: function (xhr) {
                alert('error');
            }
        });
    }
    function animateMapZoomTo(map, targetZoom) {
        var currentZoom = arguments[2] || map.getZoom();
        if (currentZoom != targetZoom) {
            google.maps.event.addListenerOnce(map, 'zoom_changed', function (event) {
                animateMapZoomTo(map, targetZoom, currentZoom + (targetZoom > currentZoom ? 1 : -1));
            });
            setTimeout(function () { map.setZoom(currentZoom) }, 80);
        }
    }

    // FOR TOURGUIDE MARKER
    var panPath = [];
    var panQueue = [];
    var STEPS = 50;
    function LoadMarker() {
        $.ajax({
            url: "/Home/CreateMarker/",
            type: "GET",
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            async: true,
            processData: false,
            cache: false,
            success: function (result) {

                var results = $.parseJSON(result);
                for (i = 0; i < results.objectArray.length; i++) {

                    var longitude = results.objectArray[i].TourGuide.longitude;
                    var laitude = results.objectArray[i].TourGuide.latitude;
                    var tourName = results.objectArray[i].Tour.tour_name;
                    var tourGuide = results.objectArray[i].TourGuide.tourguide_name;
                    var departure_date = results.objectArray[i].Tour.departure_date.split('T')[0];
                    var return_date = results.objectArray[i].Tour.return_date.split('T')[0];
                    var tourDetail = '/TourDetail/GetDetailTour/' + results.objectArray[i].Tour.tour_id;
                    var currentLocation = new google.maps.LatLng(laitude, longitude);



                    var contentString = '<div style="width: 300px;background: white;height: 150px;background: while;">' +
                        '<div style="height: 68%;">' +
                        '<div style="float: left; width: 35%; height: 100%; background: red;">' +
                        '<img style="width: 100%; height: 100%; background: red;" src="https://fbcdn-photos-b-a.akamaihd.net/hphotos-ak-xtp1/v/t1.0-0/p206x206/13620075_715125938628840_3925566649508034087_n.jpg?oh=3e2062e509862f4e898c8bfe3714c999&oe=58A211A1&__gda__=1487320374_107ddfdc334185bf70ca54924993fbd4"/>' +
                        '</div>' +
                        '<div style="float: right; width: 65%; height: 100%;">' +
                        '<div class="list-tour" style="height: 25px; margin-top: 0px; margin-left: 5px;" id="nav-accordion">' +
                        '<span style="color: black; font-size: 14px; margin-left: 10px; font-weight: bold;">' + tourName + '</span>' +
                        '</div>' +
                        '<div class="list-tour" style="height: 20px; margin-top: 0px; margin-left: 15px;" id="nav-accordion">' +
                        '<img src="/Content/Images/ic_tourguide.png" width="20" height="20"/>' +
                        '<span style="color: gray; font-size: 12px; margin-left: 20px;">' + tourGuide + '</span><span style="font-size: 16px;"></span>' +
                        '</div>' +
                        '<div class="list-tour" style="height: 20px; margin-top: 10px; margin-left: 15px;" id="nav-accordion">' +
                        '<img src="/Content/Images/ic_time.png" width="18" height="18" style="margin-top: -4px;"/>' +
                        '<span style="color: gray; font-size: 12px; margin-left: 20px;">' + departure_date + ' - ' + return_date + '</span>' +
                        '</div>' +
                        '<div class="list-tour" style="height: 20px; margin-top: 8px; margin-left: 15px;" id="nav-accordion">' +
                        '<span style="color: blue; font-size: 12px; margin-left: 20px; float: right;"><a href="' + tourDetail + '"  style="color: blue;">Xem chi tiết</a></span>' +
                        '</div>' +
                        '</div>' +
                        '</div>' +
                        '<div style="height: 10%; border-bottom: 1px solid #e5e5e6;"> </div>' +
                        '<div style="height: 22%; margin-top: 10px;">' +
                        '<div style="float: right; height: 100%; width: 20%;">' +
                        '<img src="/Content/Images/ic_message.png" width="30" height="30" style=" margin-left: 10px; float: right;"/>' +
                        '</div>' +
                        '<div style="float: right; height: 100%; width: 20%; ">' +
                        '<a href="#" data-toggle="modal" data-target="#myModal"><img src="/Content/Images/ic_warning.png" width="28" height="28" style=" margin-left: 20px; float: right;"/></a>' +
                        '</div>' +
                        '<div style="float: right; height: 100%; width: 20%;"></div>' +
                        '</div>' +
                        '</div>';

                    var count = function () {
                        return 'some value';
                    };


                    createMarker(i, currentLocation, contentString);

                }

                //var results = $.parseJSON(result);
                //$(results).each(function (index, value) {
                //    var longitude = this['longitude'];
                //    var laitude = this['latitude'];
                //    var title = " " + this['tour_guide_id'];
                //    var currentLocation = new google.maps.LatLng(laitude, longitude);
                //    createMarker(index, currentLocation, title);
                //});
            },
            error: function (xhr) {
                alert('error');
            }
        });
    }
    function createMarker(index, latlng, title) {
        window.setTimeout(function () {

            var imageMarkerWarning = {
                url: 'http://localhost:20261/Content/Images/ic_marker_warning.png', // image is 512 x 512
                scaledSize: new google.maps.Size(50, 50)
            };
            listMarker[index] = new SlidingMarker({
                position: latlng,
                map: map,
                animation: google.maps.Animation.Gp,
                icon: pinImage,
                //shadow: pinShadow
            })
            listInforwindow[index] = new google.maps.InfoWindow({
                content: title
            });

            google.maps.event.addListener(listMarker[index], "click", function () {
                for (i = 0; i < listInforwindow.length; i++) {
                    listInforwindow[i].close();
                }
                listInforwindow[index].open(map, listMarker[index]);
            });
        }, 200);
    }
    function getMarkerSelected(id) {
        $.ajax({
            url: "/Home/GetLocationMarkerSelected/" + id,
            type: "GET",
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            async: true,
            processData: false,
            cache: false,
            success: function (result) {
                var results = $.parseJSON(result);
                $(results).each(function (index, value) {
                    var longitude = this['longitude'];
                    var laitude = this['latitude'];
                    var location = new google.maps.LatLng(laitude, longitude);
                    panTo(laitude, longitude);
                    map.setZoom(15);
                    for (i = 0 ; i < listMarker.length; i++) {
                        listMarker[i].setIcon(pinImage);
                    }
                    listMarker[id - 1].setIcon(pinImageSelect);
                });
            },
            error: function (xhr) {
                alert('error');
            }
        });
    }
    $('#DemoAjaxClick').click(function () {
        setInterval(function () {
            $.ajax({
                url: "/Home/GetLocationTourGuide/20",
                type: "GET",
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                async: true,
                processData: false,
                cache: false,
                success: function (result) {
                    var results = $.parseJSON(result);
                    $(results).each(function (index, value) {

                        var longitude = this['longitude'];
                        var laitude = this['latitude'];
                        var currentLocation = new google.maps.LatLng(laitude, longitude);
                        MoverMarker(currentLocation, index)
                    });
                },
                error: function (xhr) {
                    alert('error');
                }
            });
        }, 2000)
    });
    function MoverMarker(Latlng, index) {
        var duration = parseInt($('#durationOption').val());
        if (duration < 0) {
            duration = 1;
            $('#durationOption').val(duration);
        }
        listMarker[index].setDuration(duration);
        listMarker[index].setEasing($('#easingOption').val());
        listMarker[index].setPosition(Latlng);
    }
    function panTo(newLat, newLng) {
        if (panPath.length > 0) {
            panQueue.push([newLat, newLng]);
        } else {

            panPath.push("LAZY SYNCRONIZED LOCK");
            var curLat = map.getCenter().lat();
            var curLng = map.getCenter().lng();
            var dLat = (newLat - curLat) / STEPS;
            var dLng = (newLng - curLng) / STEPS;

            for (var i = 0; i < STEPS; i++) {
                panPath.push([curLat + dLat * i, curLng + dLng * i]);
            }
            panPath.push([newLat, newLng]);
            panPath.shift();
            setTimeout(doPan, 20);
        }
    }
    function doPan() {
        var next = panPath.shift();
        if (next != null) {
            map.panTo(new google.maps.LatLng(next[0], next[1]));
            setTimeout(doPan, 20);
        } else {

            var queued = panQueue.shift();
            if (queued != null) {
                panTo(queued[0], queued[1]);
            }
        }
    }
</script>
<style type="text/css">
    button, input, select, textarea {
        border-radius: 4px;
        font-family: inherit;
        font-size: inherit;
        line-height: inherit;
    }

    .mini-stat > a {
        text-decoration: none;
    }

    .mini-stat {
        text-align: center;
    }

        .mini-stat img {
            margin: 0 auto;
            text-align: center;
        }

    .mini-stat-info span {
        color: #1FB5AD;
        font-size: 16px;
        padding-top: 17px;
        text-align: center;
    }

    .mini-stat-info a {
        text-decoration: none;
    }

    .mini-stat .hvr-glow:hover, .hvr-glow:focus, .hvr-glow:active {
        box-shadow: 0 0 8px rgba(0, 0, 0, 0.6);
        border-radius: 50%;
    }

    .mini-stat .hvr-glow {
        border-radius: 50%;
    }

    ul.list-tour, ul.list-tour li ul.sub {
        margin: -2px 0 0;
        padding: 0;
    }

    ul.list-tour {
        padding-top: 0px;
    }

        ul.list-tour li {
            border-bottom: 1px dotted #d7d7d7;
        }

            ul.list-tour li a {
                color: gray;
                text-decoration: none;
                display: block;
                padding: 18px 0 18px 12px;
                font-size: 14px;
                outline: none;
                margin-top: -25px;
            }

                ul.list-tour li a:hover {
                    font-weight: bold;
                }

                ul.list-tour li a i {
                    font-size: 15px;
                    padding-right: 6px;
                }

                ul.list-tour li a span {
                    display: inline-block;
                }

            ul.list-tour, ul.list-tour li ul.sub {
                margin: -2px 0 0;
                padding: 0;
            }

                ul.list-tour li ul.sub li {
                    margin-bottom: 0;
                    margin-left: 0px;
                    margin-right: 0;
                }

                    ul.list-tour li ul.sub li a {
                        font-size: 12px;
                        padding-top: 13px;
                        padding-bottom: 13px;
                        -webkit-transition: all 0.3s ease;
                        -moz-transition: all 0.3s ease;
                        -o-transition: all 0.3s ease;
                        -ms-transition: all 0.3s ease;
                        transition: all 0.3s ease;
                        color: #aeb2b7;
                    }

    .controls {
        margin-top: 10px;
        border: 1px solid transparent;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        height: 32px;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
    }

    #pac-input {
        background-color: #fff;
        font-family: Roboto;
        border-radius: 4px;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 300px;
    }

        #pac-input:focus {
            border-color: #4d90fe;
        }

    .pac-container {
        font-family: Roboto;
    }

    #type-selector {
        color: #fff;
        background-color: #4d90fe;
        padding: 5px 11px 0px 11px;
    }

        #type-selector label {
            font-family: Roboto;
            font-size: 13px;
            font-weight: 300;
        }

    #target {
        width: 345px;
    }
</style>